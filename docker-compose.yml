version: "3.8"
services:
  nest:
    build:
      context: .
      dockerfile: infrastructure/platforms/nest/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=triumph_fleet
      - JWT_SECRET=your-secret-key
      - JWT_EXPIRATION=1h
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  express:
    build:
      context: .
      dockerfile: infrastructure/platforms/express/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - MONGODB_URI=mongodb://admin:password123@mongo:27017/triumphrental?authSource=admin
      - NODE_ENV=development
      - MONGO_INITDB_DATABASE=triumphrental
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./infrastructure/platforms/vue
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./infrastructure/platforms/vue:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - nest
      - express
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: triumph_fleet_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: triumph_fleet
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d triumph_fleet"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:5.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=triumphrental
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: mongod --bind_ip_all

  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
